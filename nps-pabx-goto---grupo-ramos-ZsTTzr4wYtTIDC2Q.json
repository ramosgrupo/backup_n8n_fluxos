{"createdAt":"2025-03-15T16:11:17.413Z","updatedAt":"2025-03-18T14:49:14.314Z","id":"ZsTTzr4wYtTIDC2Q","name":"NPS PABX GoTo - Grupo RAMOS","active":true,"nodes":[{"parameters":{"httpMethod":"POST","path":"nps02_teste","options":{}},"id":"2a542e65-e7e9-4e04-8562-23bd2c3f44e2","name":"Webhook1","type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-2100,120],"webhookId":"7dfa6834-557b-4040-b361-022a7e383e75"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"bca732c9-3102-42d7-8fe8-bedede0ca0b9","leftValue":"={{ $json.body.direction }}","rightValue":"INBOUND","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-1900,120],"id":"6845466b-7a38-49ab-b1c9-fe921fb161e9","name":"If"},{"parameters":{"jsCode":"// Função para formatar o timestamp no formato brasileiro DD/MM/YYYY HH:mm:ss\nfunction formatTimestamp(timestamp) {\n    const date = new Date(timestamp);\n    const options = {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n        timeZone: 'America/Fortaleza'\n    };\n    return date.toLocaleString('pt-BR', options).replace(',', ''); // Remove a vírgula entre data e hora\n}\n\n// Função para garantir que se uma lista estiver vazia, preencha com \"N/A\"\nfunction fillWithNA(dataArray) {\n    return dataArray.length > 0 ? dataArray : [\"N/A\"];\n}\n\n// Função para extrair participantes do tipo \"AGENT\" e dados de chamadas em estado \"STARTING\"\nfunction extractAgentsAndCallData(items) {\n    const participants = items[0].json.body.participants || []; // Acessa os participantes ou um array vazio\n    const callStates = items[0].json.body.callStates || []; // Acessa estados das chamadas ou um array vazio\n\n    // Inicializa os arrays para armazenar resultados\n    let callData = [];\n\n    // Iterar sobre os estados das chamadas para extrair dados\n    callStates.forEach(state => {\n        if (state.type === \"STARTING\") {\n            callData.push({\n                dataHora: formatTimestamp(state.timestamp), // Formata o timestamp\n                participants: fillWithNA(state.participants.map(participant => {\n                    // Extrai o nome, o número de extensão e o número do callee\n                    return {\n                        nameEmpresa: participant.type.name || \"N/A\",\n                        numeroEmpresa: participant.type.number || \"N/A\",\n                        numeroClient: participant.type.caller?.number || \"N/A\" // Utilizando optional chaining (?.)\n                    };\n                }))\n            });\n        }\n    });\n\n    // Preenche com \"N/A\" se agentes ou dados de chamadas estiverem vazios\n    return {\n        callData: fillWithNA(callData)\n    };\n}\n\n// Função principal para processar os dados e retornar resultados\nfunction processItems(items) {\n    const results = [];\n    const participantsData = items; // Recebe dados para processar como entrada\n\n    // Verifica se o JSON contém a mensagem de erro\n    if (participantsData[0].json.body.message === 'Nenhuma opção encontrada.') {\n        results.push({ message: 'Nenhuma opção encontrada. Tente outra busca.' });\n    } else {\n        // Extract ramal and operador when destinationNumber is \"1008\"\n        let participantsNumberData = []; // Inicializa array para armazenar números de destino\n\n        // Itera por cada entrada de dados\n        for (const data of participantsData) {\n            // Acessa os estados de todos os participantes em cada estado da chamada\n            for (const callState of data.json.body.callStates) {\n                const participants = callState.participants; // Acessa a lista de participantes\n                \n                // Itera pelos participantes e coleta os dados quando o status é \"IN_DIRECT_TRANSFER\"\n                for (const participant of participants) {\n                    if (participant.status && participant.status.value === \"IN_DIRECT_TRANSFER\") {\n                        // Acessa o número de destino e o nome do iniciador\n                        const destinationNumber = participant.status.destination?.number || null;\n                        const ramal = participant.status.initiator?.extensionNumber || null;\n                        const operador = participant.status.initiator?.name || null;\n\n                        // Verifica se o destinationNumber é igual a 1008\n                        if (destinationNumber === \"1000\") {\n                            // Cria um objeto com as informações do ramal e operador\n                            const numberInfo = {\n                                name: operador,\n                                ramal: ramal\n                            };\n\n                            participantsNumberData.push(numberInfo); // Armazena os dados encontrados\n                            break; // Para a execução após encontrar o primeiro registro com destinationNumber igual a 1008\n                        }\n                    }\n                }\n                // Encerra o loop das chamadas se um registro foi encontrado\n                if (participantsNumberData.length > 0) {\n                    break;\n                }\n            }\n        }\n\n        // Verifica os sistemas de resposta interativa\n        const ivrs = participantsData[0].json.body.interactiveVoiceResponseSystems || [];\n        const callStates = participantsData[0].json.body.callStates || [];\n\n        // Verificando os estados de chamada para capturar possíveis opções\n        callStates.forEach((state) => {\n            if (state.interactiveVoiceResponseSystems) {\n                state.interactiveVoiceResponseSystems.forEach((ivr) => {\n                    // Verifica se o valor da opção está presente nos detalhes do nó\n                    if (ivr.type.currentNode && ivr.type.currentNode.option) {\n                        results.push({\n                            id: ivr.id,\n                            option: ivr.type.currentNode.option,\n                            type: ivr.type.value\n                        });\n                    }\n                });\n            }\n        });\n\n        // Se nenhum sistema ou opção foi encontrado\n        if (results.length === 0) {\n            results.push({ message: 'Nenhuma opção disponível. A pesquisa não foi respondida.' });\n        }\n\n        // Retorna também os dados do ramal e operador quando destinationNumber é \"1008\"\n        return {\n            option: results,\n            agents: participantsNumberData.slice(0, 1),\n            callData: extractAgentsAndCallData(participantsData).callData\n        };\n    }\n\n    // Retornar os dados processados\n    const extractedData = extractAgentsAndCallData(items);\n    return {\n        option: results,\n        callData: extractedData.callData\n    };\n}\n\n// Chama a função principal e retorna os resultados\nreturn processItems(items);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1680,20],"id":"7b0281bb-eef6-4377-afd1-c142e34ea3c4","name":"Dados PABX2"},{"parameters":{"jsCode":"/**\n * Formata o timestamp no formato brasileiro DD/MM/YYYY HH:mm:ss\n * @param {string} timestamp - Data e hora em formato ISO\n * @returns {string} - Data formatada\n */\nfunction formatTimestamp(timestamp) {\n    const date = new Date(timestamp);\n    const options = {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n        timeZone: 'America/Fortaleza'\n    };\n    return date.toLocaleString('pt-BR', options).replace(',', ''); // Remove a vírgula entre data e hora\n}\n\n/**\n * Preenche um array vazio com \"N/A\"\n * @param {Array} dataArray - Array de dados\n * @returns {Array} - Retorna o array ou [\"N/A\"]\n */\nfunction fillWithNA(dataArray) {\n    return dataArray.length > 0 ? dataArray : [\"N/A\"];\n}\n\n/**\n * Extrai participantes do tipo \"LINE\" e dados de chamadas em estado \"ACTIVE\"\n * @param {Array} items - Lista de itens do JSON\n * @returns {Object} - Contém agentes e dados de chamadas\n */\nfunction extractAgentsAndCallData(items) {\n    const participants = items[0].json.body.participants || [];\n    const callStates = items[0].json.body.callStates || [];\n\n    let agents = [];\n    let callData = [];\n\n    // Iterar sobre os participantes para extrair AGENTS\n    participants.forEach(participant => {\n        if (participant.type && participant.type.value === \"LINE\") {\n            agents.push({\n                name: participant.type.name || \"N/A\",\n                ramal: participant.type.extensionNumber || \"N/A\"\n            });\n        }\n    });\n\n      // Iterar sobre os estados das chamadas para extrair dados\n    callStates.forEach(state => {\n        if (state.type === \"ACTIVE\") {\n            const phoneNumbers = state.participants.filter(participant => participant.type.value === \"PHONE_NUMBER\");\n\n            // Verifica se temos ao menos um PHONE_NUMBER e um LINE\n            if (phoneNumbers.length > 0 && agents.length > 0) {\n                // Pesquisa o primeiro participante com informações válidas\n                const validParticipants = state.participants.map(participant => ({\n                    nameEmpresa: participant.type.name || \"N/A\",\n                    numeroEmpresa: participant.type.number || \"N/A\",\n                    numeroClient: participant.type.callee?.number || \"N/A\"\n                }));\n\n                // Encontra o primeiro participante que não é \"N/A\"\n                const firstValidParticipant = validParticipants.find(p => p.nameEmpresa !== \"N/A\" && p.numeroEmpresa !== \"N/A\" && p.numeroClient !== \"N/A\");\n                \n                // Se um participante válido for encontrado, adiciona à callData\n                if (firstValidParticipant) {\n                    callData.push({\n                        dataHora: formatTimestamp(state.timestamp),\n                        participants: [firstValidParticipant] // Armazena somente o primeiro participante válido\n                    });\n                }\n            }\n        }\n    });\n\n    return {\n        agents: fillWithNA(agents),\n        callData: fillWithNA(callData)\n    };\n}\n\n/**\n * Processa os itens e retorna os resultados.\n * @param {Array} items - Lista de itens do JSON\n * @returns {Object} - Dados processados\n */\nfunction processItems(items) {\n    const results = [];\n\n    if (items[0].json.body.message === 'Nenhuma opção encontrada.') {\n        results.push({ message: 'Nenhuma opção encontrada. Tente outra busca.' });\n    } else {\n        const ivrs = items[0].json.body.interactiveVoiceResponseSystems || [];\n        const callStates = items[0].json.body.callStates || [];\n\n        callStates.forEach((state) => {\n            state.interactiveVoiceResponseSystems?.forEach((ivr) => {\n                if (ivr.type.currentNode && ivr.type.currentNode.option) {\n                    results.push({\n                        id: ivr.id,\n                        option: ivr.type.currentNode.option,\n                        type: ivr.type.value\n                    });\n                }\n            });\n        });\n\n        if (results.length === 0) {\n            results.push(null);\n        }\n    }\n\n    const extractedData = extractAgentsAndCallData(items);\n    return {\n        option: results,\n        agents: extractedData.agents,\n        callData: extractedData.callData\n    };\n}\n\n// Chama a função principal e retorna os resultados\nreturn processItems(items);\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1680,220],"id":"14fc04b6-b721-4abd-8048-2a0ca1da2acd","name":"Dados PABX"},{"parameters":{"operation":"append","documentId":{"__rl":true,"value":"11gka6tXU8F_wFlrKRdP6Eg3nDuD7e93tZWvfZUFStV8","mode":"id"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Telefonia Dados","cachedResultUrl":"https://docs.google.com/spreadsheets/d/11gka6tXU8F_wFlrKRdP6Eg3nDuD7e93tZWvfZUFStV8/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"Operador":"={{ $json.Operador }}","Ramal":"={{ $json.Ramal }}","Numero Empresa":"={{ $json[\"Numero Empresa\"] }}","Empresa":"={{ $json.Empresa }}","Numero Cliente":"={{ $json[\"Numero Cliente\"] }}","Nota":"={{ $json.Nota }}","Protocolo":"={{ $json.Protocolo }}","Tipo de Ligação":"={{ $json[\"Status Ligação\"] }}","Setor":"={{ $json.Setor }}","Data":"={{ $json.Data }}","Hora":"={{ $json.Hora }}"},"matchingColumns":[],"schema":[{"id":"Protocolo","displayName":"Protocolo","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Data","displayName":"Data","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Hora","displayName":"Hora","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Tipo de Ligação","displayName":"Tipo de Ligação","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Operador","displayName":"Operador","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Ramal","displayName":"Ramal","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Empresa","displayName":"Empresa","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Numero Empresa","displayName":"Numero Empresa","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Numero Cliente","displayName":"Numero Cliente","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Nota","displayName":"Nota","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Setor","displayName":"Setor","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"id":"ea3231a4-4350-49b1-8a07-e4dc9cfd7b37","name":"Google Sheets1","type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[20,440],"alwaysOutputData":false,"credentials":{"googleSheetsOAuth2Api":{"id":"oQRxLxfNhDapUiHQ","name":"Google Sheets account Clenildon"}}},{"parameters":{"jsCode":"for (const item of $input.all()) {\n    // Verificar se \"Data Hora\" existe e não é nulo\n    const dataHoraOriginal = item.json[\"Data Hora\"];\n    \n    if (dataHoraOriginal) {\n        // Separar a data e a hora\n        const [data, hora] = dataHoraOriginal.split(\" \");\n        \n        // Formatar a data e a hora\n        const dataFormatada = data; // você pode formatar a data se necessário\n        const horaFormatada = hora; // mantendo a hora sem alterações\n        \n        // Sobrescrever o campo \"Data Hora\" com o valor formatado ou criar novos campos\n        item.json[\"Data\"] = dataFormatada;\n        item.json[\"Hora\"] = horaFormatada;\n    } else {\n        // Caso \"Data Hora\" esteja ausente ou seja nulo, usar um valor padrão\n        item.json[\"Data\"] = \"Data inválida\";\n        item.json[\"Hora\"] = \"Hora inválida\";\n    }\n\n    // Gerar um protocolo único\n    const now = new Date();\n    const dateCompact = now.getFullYear().toString().slice(2) +\n        String(now.getMonth() + 1).padStart(2, '0') +\n        String(now.getDate()).padStart(2, '0') +\n        String(now.getHours()).padStart(2, '0') +\n        String(now.getMinutes()).padStart(2, '0');\n    const randomPart = Math.floor(Math.random() * 100000).toString().padStart(5, '0');\n    const protocolo = `${dateCompact}${randomPart}`;\n    \n    // Adicionar o campo \"Protocolo\" com o valor único\n    item.json.Protocolo = protocolo;\n}\n\nreturn $input.all();\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1240,-100],"id":"de1c4a8d-2942-43ec-8eb2-6dfcb1809db9","name":"Code"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"c47f7053-bec6-4e50-b691-79e1fed5407f","leftValue":"={{ $json.Nota }}","rightValue":3,"operator":{"type":"number","operation":"lte"}},{"id":"924c6666-9a78-465d-9882-471ce7a52c26","leftValue":null,"rightValue":"","operator":{"type":"number","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-160,-220],"id":"da4c0e95-de18-498d-94f8-ad5ae53e00f9","name":"Filter2"},{"parameters":{"sendTo":"sac@cearagps.com.br ","subject":"=Relatório de Avaliação Negativa - Protocolo {{ $json.Protocolo }}","message":"=<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Relatório de Avaliação - Atendimento</title>\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f3f4f6;\n            color: #333;\n        }\n\n        .container {\n            max-width: 600px;\n            margin: 40px auto;\n            background-color: #ffffff;\n            padding: 30px;\n            border-radius: 10px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n            font-size: 24px;\n            color: #4a5568;\n            text-align: center;\n            margin-bottom: 20px;\n            border-bottom: 2px solid #e2e8f0;\n            padding-bottom: 10px;\n        }\n\n        p {\n            margin: 10px 0;\n            line-height: 1.6;\n        }\n\n        .highlight {\n            color: #e53e3e; /* Vermelho para a nota */\n            font-weight: bold;\n        }\n\n        .details {\n            margin-top: 20px;\n            padding: 20px;\n            background-color: #f7fafc;\n            border: 1px solid #e2e8f0;\n            border-radius: 8px;\n        }\n\n        .details p {\n            margin: 5px 0;\n        }\n\n        .details p strong {\n            color: #2d3748;\n        }\n\n        .footer {\n            text-align: center;\n            margin-top: 20px;\n            font-size: 14px;\n            color: #718096;\n        }\n\n        .footer strong {\n            color: #2d3748;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Relatório de Avaliação - Atendimento</h1>\n        <p>Prezado(a),</p>\n        <p>O cliente com número <span><b>{{ $json['Numero Cliente'] }}</b></span> avaliou negativamente o atendimento realizado na ligação de <span><b>{{ $json['Data Hora'] }}</b></span>, atribuindo a nota <span class=\"highlight\">{{ $json.Nota }}</span>.</p>\n        <div class=\"details\">\n            <p><strong>Detalhes da Ligação:</strong></p>\n            <p><strong>Operador:</strong> {{ $json.Operador }}</p>\n            <p><strong>Ramal:</strong> {{ $json.Ramal }}</p>\n            <p><strong>Empresa:</strong> {{ $json.Empresa }}</p>\n            <p><strong>Número da Empresa:</strong> {{ $json['Numero Empresa'] }}</p>\n            <p><strong>Número do Cliente:</strong> {{ $json['Numero Cliente'] }}</p>\n            <p><strong>Nota:</strong> <span class=\"highlight\">{{ $json.Nota }}</span></p>\n            <p><strong>Tipo da Ligação:</strong> {{ $json['Status Ligação'] }}</p>\n            <p><strong>Protocolo:</strong> {{ $json.Protocolo }}</p>\n        </div>\n        <p>Por favor, verifique o caso para possíveis ações de melhoria.</p>\n        <div class=\"footer\">\n            <p>Atenciosamente,</p>\n            <p><strong>T.I Grupo Ramos</strong></p>\n        </div>\n    </div>\n</body>\n</html>\n\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[40,-220],"id":"6cbc5a75-6060-4009-84cb-632054a0769a","name":"Gmail","webhookId":"e55b441d-2b6d-4aeb-a9f4-d92141c875bc","credentials":{"gmailOAuth2":{"id":"uZK9AXgcbkul3sVE","name":"Gmail account Clenildon"}}},{"parameters":{"assignments":{"assignments":[{"id":"0c8814f5-bb23-45fc-bb5f-bae6d314ca08","name":"Data Hora","value":"={{ $json.callData[0].dataHora }}","type":"string"},{"id":"db26c79b-0455-4dfb-83c6-4f1d1ac645b5","name":"Operador","value":"={{ $json.agents[0].name }}","type":"string"},{"id":"ba9b4a58-5eaf-4192-bf44-de7c2269f1db","name":"Ramal","value":"={{ $json.agents[0].ramal }}","type":"string"},{"id":"c1b0cea3-f133-4960-bc9d-3e991d13a049","name":"Empresa","value":"={{ $json.callData[0].participants[0].nameEmpresa }}","type":"string"},{"id":"de7a6c02-c40a-4f46-82f0-8ecdabf89da7","name":"Numero Empresa","value":"={{ $json.callData[0].participants[0].numeroEmpresa }}","type":"string"},{"id":"8613468b-9b16-45fe-b9b9-720b680833e8","name":"Numero Cliente","value":"={{ $json.callData[0].participants[0].numeroClient }}","type":"string"},{"id":"7f7a91cd-a3e5-4bb3-9c78-86f31133edb4","name":"Nota","value":"={{ $json.option[1].option}}","type":"number"},{"id":"7ee79f91-a97a-4bdf-a120-140c2979fc0c","name":"Protocolo","value":"","type":"string"},{"id":"f1123190-d5c0-4687-9e32-e6d6e2840599","name":"Status Ligação","value":"Receptiva","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1500,-20],"id":"6f2ce673-8c81-48ed-beb0-0e186bcc7074","name":"Formatando Dados - Recepitiva"},{"parameters":{"assignments":{"assignments":[{"id":"0c8814f5-bb23-45fc-bb5f-bae6d314ca08","name":"Data Hora","value":"={{ $json.callData[0].dataHora }}","type":"string"},{"id":"db26c79b-0455-4dfb-83c6-4f1d1ac645b5","name":"Operador","value":"={{ $json.agents[0].name }}","type":"string"},{"id":"ba9b4a58-5eaf-4192-bf44-de7c2269f1db","name":"Ramal","value":"={{ $json.agents[0].ramal }}","type":"string"},{"id":"c1b0cea3-f133-4960-bc9d-3e991d13a049","name":"Empresa","value":"={{ $json.callData[0].participants[0].nameEmpresa }}","type":"string"},{"id":"de7a6c02-c40a-4f46-82f0-8ecdabf89da7","name":"Numero Empresa","value":"={{ $json.callData[0].participants[0].numeroEmpresa }}","type":"string"},{"id":"8613468b-9b16-45fe-b9b9-720b680833e8","name":"Numero Cliente","value":"={{ $json.callData[0].participants[0].numeroClient }}","type":"string"},{"id":"7f7a91cd-a3e5-4bb3-9c78-86f31133edb4","name":"Nota","value":"={{ $json.option[0].option}}","type":"number"},{"id":"7ee79f91-a97a-4bdf-a120-140c2979fc0c","name":"Protocolo","value":"","type":"string"},{"id":"f1123190-d5c0-4687-9e32-e6d6e2840599","name":"Status Ligação","value":"Ativa","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1480,260],"id":"69203479-2034-445d-adff-50b13c96b4f0","name":"Formatando Dados Ativa"},{"parameters":{"jsCode":"for (const item of $input.all()) {\n    // Verificar se \"Data Hora\" existe e não é nulo\n    const dataHoraOriginal = item.json[\"Data Hora\"];\n    \n    if (dataHoraOriginal) {\n        // Separar a data e a hora\n        const [data, hora] = dataHoraOriginal.split(\" \");\n        \n        // Formatar a data e a hora\n        const dataFormatada = data; // você pode formatar a data se necessário\n        const horaFormatada = hora; // mantendo a hora sem alterações\n        \n        // Sobrescrever o campo \"Data Hora\" com o valor formatado ou criar novos campos\n        item.json[\"Data\"] = dataFormatada;\n        item.json[\"Hora\"] = horaFormatada;\n    } else {\n        // Caso \"Data Hora\" esteja ausente ou seja nulo, usar um valor padrão\n        item.json[\"Data\"] = \"Data inválida\";\n        item.json[\"Hora\"] = \"Hora inválida\";\n    }\n\n    // Gerar um protocolo único\n    const now = new Date();\n    const dateCompact = now.getFullYear().toString().slice(2) +\n        String(now.getMonth() + 1).padStart(2, '0') +\n        String(now.getDate()).padStart(2, '0') +\n        String(now.getHours()).padStart(2, '0') +\n        String(now.getMinutes()).padStart(2, '0');\n    const randomPart = Math.floor(Math.random() * 100000).toString().padStart(5, '0');\n    const protocolo = `${dateCompact}${randomPart}`;\n    \n    // Adicionar o campo \"Protocolo\" com o valor único\n    item.json.Protocolo = protocolo;\n}\n\nreturn $input.all();\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1180,360],"id":"8de64879-c88c-4109-945a-52e114b75c13","name":"Code1"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e96fa4d6-b989-4374-a06c-3e5b0461ec2d","leftValue":"={{ $json[\"Data Hora\"] }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}},{"id":"cdeeb189-90bb-4c73-941a-886267a71b7a","leftValue":"={{ $json.Operador }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}},{"id":"972ab541-3420-4a8c-80fc-801a14d61453","leftValue":"={{ $json.Empresa }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}},{"id":"25401ce3-09c7-4aa1-92bd-ca205205e820","leftValue":"={{ $json.Ramal }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}},{"id":"720dbdbe-78e0-4694-a80e-3eaff0d59791","leftValue":"={{ $json[\"Numero Cliente\"] }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-620,360],"id":"2cb09110-b189-4a24-822d-4aebd7afcf1d","name":"Verificar se Há Nota"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"37c49396-6e9b-4f51-866c-80267885d30f","leftValue":"={{ $json.Operador }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}},{"id":"10a66ab5-4d37-4b4a-99f6-b7c2f623bfae","leftValue":"={{ $json.Ramal }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}},{"id":"1e94a9af-493c-4e2d-bd96-b7b0ce25006f","leftValue":"={{ $json[\"Data Hora\"] }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}},{"id":"678f000b-cc6b-4421-a5b3-9602824ed698","leftValue":"={{ $json[\"Numero Empresa\"] }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}},{"id":"c15992f7-c123-4132-85d9-8a0f2aefa826","leftValue":"={{ $json[\"Numero Cliente\"] }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-680,-180],"id":"368107c0-9c13-4adc-ab2f-f84a4e9cbfae","name":"Verificar se há Nota Recepitiva"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"c47f7053-bec6-4e50-b691-79e1fed5407f","leftValue":"={{ $json.Nota }}","rightValue":3,"operator":{"type":"number","operation":"lte"}},{"id":"1a59cfed-3ab1-4bff-96d3-9839a6ca1434","leftValue":"={{ $json.Nota }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-160,-60],"id":"a4f8cc2f-8a29-4ed9-b163-4cb344769152","name":"Filter"},{"parameters":{"sendTo":"sac@cearagps.com.br ","subject":"=Relatório de Avaliação Negativa - Protocolo {{ $json.Protocolo }}","message":"=<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Relatório de Avaliação - Atendimento</title>\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f3f4f6;\n            color: #333;\n        }\n\n        .container {\n            max-width: 600px;\n            margin: 40px auto;\n            background-color: #ffffff;\n            padding: 30px;\n            border-radius: 10px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n            font-size: 24px;\n            color: #4a5568;\n            text-align: center;\n            margin-bottom: 20px;\n            border-bottom: 2px solid #e2e8f0;\n            padding-bottom: 10px;\n        }\n\n        p {\n            margin: 10px 0;\n            line-height: 1.6;\n        }\n\n        .highlight {\n            color: #e53e3e; /* Vermelho para a nota */\n            font-weight: bold;\n        }\n\n        .details {\n            margin-top: 20px;\n            padding: 20px;\n            background-color: #f7fafc;\n            border: 1px solid #e2e8f0;\n            border-radius: 8px;\n        }\n\n        .details p {\n            margin: 5px 0;\n        }\n\n        .details p strong {\n            color: #2d3748;\n        }\n\n        .footer {\n            text-align: center;\n            margin-top: 20px;\n            font-size: 14px;\n            color: #718096;\n        }\n\n        .footer strong {\n            color: #2d3748;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Relatório de Avaliação - Atendimento</h1>\n        <p>Prezado(a),</p>\n        <p>O cliente com número <span><b>{{ $json['Numero Cliente'] }}</b></span> avaliou negativamente o atendimento realizado na ligação de <span><b>{{ $json['Data Hora'] }}</b></span>, atribuindo a nota <span class=\"highlight\">{{ $json.Nota }}</span>.</p>\n        <div class=\"details\">\n            <p><strong>Detalhes da Ligação:</strong></p>\n            <p><strong>Operador:</strong> {{ $json.Operador }}</p>\n            <p><strong>Ramal:</strong> {{ $json.Ramal }}</p>\n            <p><strong>Empresa:</strong> {{ $json.Empresa }}</p>\n            <p><strong>Número da Empresa:</strong> {{ $json['Numero Empresa'] }}</p>\n            <p><strong>Número do Cliente:</strong> {{ $json['Numero Cliente'] }}</p>\n            <p><strong>Nota:</strong> <span class=\"highlight\">{{ $json.Nota }}</span></p>\n            <p><strong>Tipo da Ligação:</strong> {{ $json['Status Ligação'] }}</p>\n            <p><strong>Protocolo:</strong> {{ $json.Protocolo }}</p>\n        </div>\n        <p>Por favor, verifique o caso para possíveis ações de melhoria.</p>\n        <div class=\"footer\">\n            <p>Atenciosamente,</p>\n            <p><strong>T.I Grupo Ramos</strong></p>\n        </div>\n    </div>\n</body>\n</html>\n\n","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[40,-60],"id":"a16b037c-ebdb-45d4-8467-3e0086c410e0","name":"Gmail1","webhookId":"e55b441d-2b6d-4aeb-a9f4-d92141c875bc","credentials":{"gmailOAuth2":{"id":"uZK9AXgcbkul3sVE","name":"Gmail account Clenildon"}}},{"parameters":{"jsCode":"// Loop sobre os itens de entrada e adiciona um novo campo chamado \"Setor\"\nfor (const item of $input.all()) {\n  // Define um valor padrão para o setor\n  let setor;\n\n  // Acessa o ramal da propriedade do item\n  const ramal = item.json.Ramal;\n\n  // Mapeia os ramais para seus respectivos setores\n  if ([\"6100\", \"6101\", \"6102\", \"6103\", \"6104\", \"6105\", \"6106\", \"6107\", \"6108\", \"6109\", \"6110\", \"6111\", \"6112\", \"6130\", \"6132\"].includes(ramal)) {\n    setor = \"Central\";\n  } else if (ramal === \"6113\") {\n    setor = \"Agendamento\";\n  } else if (ramal === \"6116\") {\n    setor = \"Administrativo\";\n  } else if ([\"6117\", \"6118\", \"6119\", \"6120\", \"6121\", \"6122\", \"6123\", \"6124\"].includes(ramal)) {\n    setor = \"Recebiveis\";\n  } else if ([\"6128\", \"6129\", \"6131\", \"6114\", \"6115\"].includes(ramal)) {\n    setor = \"Comercial\";\n  } else if (ramal === \"6133\") {\n    setor = \"Sucesso do Cliente\";\n  } else if (ramal === \"6134\") {\n    setor = \"TI\";\n  } else if (ramal === \"6125\") {\n    setor = \"Suporte CRX\";\n  } else if (ramal === \"6126\") {\n    setor = \"Comercial CRX\";\n  } else if (ramal === \"6127\") {\n    setor = \"Financeiro CRX\";\n  } else {\n    setor = \"Desconhecido\"; // Para ramais que não se encaixam nas regras\n  }\n\n  // Adiciona o setor ao item\n  item.json.Setor = setor;\n}\n\nreturn $input.all();\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-960,-160],"id":"0ae9e4f6-f4bd-4190-bfe6-635d161916bf","name":"Campo setor Logica"},{"parameters":{"jsCode":"// Loop sobre os itens de entrada e adiciona um novo campo chamado \"Setor\"\nfor (const item of $input.all()) {\n  // Define um valor padrão para o setor\n  let setor;\n\n  // Acessa o ramal da propriedade do item\n  const ramal = item.json.Ramal;\n\n  // Mapeia os ramais para seus respectivos setores\n  if ([\"6100\", \"6101\", \"6102\", \"6103\", \"6104\", \"6105\", \"6106\", \"6107\", \"6108\", \"6109\", \"6110\", \"6111\", \"6112\", \"6130\", \"6132\"].includes(ramal)) {\n    setor = \"Central\";\n  } else if (ramal === \"6113\") {\n    setor = \"Agendamento\";\n  } else if (ramal === \"6116\") {\n    setor = \"Administrativo\";\n  } else if ([\"6117\", \"6118\", \"6119\", \"6120\", \"6121\", \"6122\", \"6123\", \"6124\"].includes(ramal)) {\n    setor = \"Recebiveis\";\n  } else if ([\"6128\", \"6129\", \"6131\", \"6114\", \"6115\"].includes(ramal)) {\n    setor = \"Comercial\";\n  } else if (ramal === \"6133\") {\n    setor = \"Sucesso do Cliente\";\n  } else if (ramal === \"6134\") {\n    setor = \"TI\";\n  } else if (ramal === \"6125\") {\n    setor = \"Suporte CRX\";\n  } else if (ramal === \"6126\") {\n    setor = \"Comercial CRX\";\n  } else if (ramal === \"6127\") {\n    setor = \"Financeiro CRX\";\n  } else {\n    setor = \"Desconhecido\"; // Para ramais que não se encaixam nas regras\n  }\n\n  // Adiciona o setor ao item\n  item.json.Setor = setor;\n}\n\nreturn $input.all();\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-920,380],"id":"053d76af-b183-4bfc-ad2f-1efe83b03b8e","name":"Campo setor Logica1"},{"parameters":{"jsCode":"for (const item of $input.all()) {\n    // Verificar se \"Data Hora\" existe e não é nulo\n    const dataHoraOriginal = item.json[\"Data Hora\"];\n    \n    if (dataHoraOriginal) {\n        // Adicionar \"às\" ao valor de \"Data Hora\", separando data e hora\n        const [data, hora] = dataHoraOriginal.split(\" \");\n        const dataHoraFormatada = `${data} às ${hora}`;\n        \n        // Sobrescrever o campo \"Data Hora\" com o valor formatado\n        item.json[\"Data Hora\"] = dataHoraFormatada;\n    } else {\n        // Caso \"Data Hora\" esteja ausente ou seja nulo, usar um valor padrão\n        item.json[\"Data Hora\"] = \"Data/Hora inválida\";\n    }\n}\n\nreturn $input.all();"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-340,-220],"id":"278dffad-eb09-41f7-96c3-e5dd5979015d","name":"Code2"},{"parameters":{"jsCode":"for (const item of $input.all()) {\n    // Verificar se \"Data Hora\" existe e não é nulo\n    const dataHoraOriginal = item.json[\"Data Hora\"];\n    \n    if (dataHoraOriginal) {\n        // Adicionar \"às\" ao valor de \"Data Hora\", separando data e hora\n        const [data, hora] = dataHoraOriginal.split(\" \");\n        const dataHoraFormatada = `${data} às ${hora}`;\n        \n        // Sobrescrever o campo \"Data Hora\" com o valor formatado\n        item.json[\"Data Hora\"] = dataHoraFormatada;\n    } else {\n        // Caso \"Data Hora\" esteja ausente ou seja nulo, usar um valor padrão\n        item.json[\"Data Hora\"] = \"Data/Hora inválida\";\n    }\n}\n\nreturn $input.all();\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-340,-60],"id":"39225e98-415b-4808-a903-3f436144d2be","name":"Code3"},{"parameters":{"jsCode":"items.forEach(item => {\n  if (item.json[\"Nota\"] === null) {\n    item.json[\"Nota\"] = \"ligação não avaliada\";\n  }\n});\nreturn items;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-240,440],"id":"2bb149b1-e23d-4530-99bc-86340bc9bc05","name":"Format nota"}],"connections":{"Webhook1":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[{"node":"Dados PABX2","type":"main","index":0}],[{"node":"Dados PABX","type":"main","index":0}]]},"Dados PABX":{"main":[[{"node":"Formatando Dados Ativa","type":"main","index":0}]]},"Dados PABX2":{"main":[[{"node":"Formatando Dados - Recepitiva","type":"main","index":0}]]},"Code":{"main":[[{"node":"Campo setor Logica","type":"main","index":0}]]},"Filter2":{"main":[[{"node":"Gmail","type":"main","index":0}]]},"Formatando Dados - Recepitiva":{"main":[[{"node":"Code","type":"main","index":0}]]},"Formatando Dados Ativa":{"main":[[{"node":"Code1","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Campo setor Logica1","type":"main","index":0}]]},"Verificar se Há Nota":{"main":[[{"node":"Code3","type":"main","index":0},{"node":"Format nota","type":"main","index":0}]]},"Verificar se há Nota Recepitiva":{"main":[[{"node":"Code2","type":"main","index":0},{"node":"Format nota","type":"main","index":0}]]},"Filter":{"main":[[{"node":"Gmail1","type":"main","index":0}]]},"Campo setor Logica":{"main":[[{"node":"Verificar se há Nota Recepitiva","type":"main","index":0}]]},"Campo setor Logica1":{"main":[[{"node":"Verificar se Há Nota","type":"main","index":0}]]},"Code2":{"main":[[{"node":"Filter2","type":"main","index":0}]]},"Code3":{"main":[[{"node":"Filter","type":"main","index":0}]]},"Format nota":{"main":[[{"node":"Google Sheets1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"Webhook1":[{"json":{"headers":{"host":"n8nwebhook.cearatec.cloud","user-agent":"axios/1.7.9","content-length":"7433","accept":"application/json, text/plain, */*","accept-encoding":"gzip, br","cdn-loop":"cloudflare; loops=1","cf-connecting-ip":"185.249.227.23","cf-ipcountry":"DE","cf-ray":"922503faba67f954-DUS","cf-visitor":"{\"scheme\":\"https\"}","content-type":"application/json","x-forwarded-for":"185.249.227.23, 172.69.109.124","x-forwarded-host":"n8nwebhook.cearatec.cloud","x-forwarded-port":"443","x-forwarded-proto":"https","x-forwarded-server":"2d40452d35ae","x-real-ip":"172.69.109.124"},"params":{},"query":{},"body":{"conversationSpaceId":"3a604166-8f20-31e5-ba57-457a253a78f1","callCreated":"2025-03-18T13:18:03.518Z","callEnded":"2025-03-18T13:18:16.628Z","callInitiator":"DIRECT","direction":"OUTBOUND","accountKey":"8621343684556870338","participants":[{"id":"68456c8f-67a8-521e-a56f-3b3f8ac62892","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","legId":"0ce12211-eed9-4ed0-a30f-7b0eb358277a","recordings":[{"id":"bf04ae2f-bcd6-4f5b-a65c-acb33d01c147","startTimestamp":"2025-03-18T13:18:11.692Z","transcriptEnabled":false}],"liveTranscripts":[],"type":{"value":"LINE","lineId":"b33b6f9c-7626-4aa7-823c-cd0010e2781e","deviceId":"e22380dc-4cf7-44f3-aa21-e2296644f218","extensionNumber":"6114","name":"Comercial Gabriela-Daisyane","userId":"c515d828-4817-4da0-ac5a-40f297b1c26d","userKey":"1667613238455079157"}},{"id":"ccaae240-0a44-5cf6-bc6d-1472b5c2e713","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","legId":"a90f8b6b-e2cd-4607-9ce0-44af3bb64f72","recordings":[{"id":"1d5c3b9b-3dcc-491b-9088-fc01335d657a","startTimestamp":"2025-03-18T13:18:15.124Z","transcriptEnabled":false}],"liveTranscripts":[],"type":{"value":"PHONE_NUMBER","phoneNumberId":"c30dc08d-d7cc-4cad-a967-8db6552e558f","number":"+558534846006","callee":{"name":"","number":"+5585987327422"}}}],"interactiveVoiceResponseSystems":[],"associatedConversations":[],"hangupOriginatorId":"68456c8f-67a8-521e-a56f-3b3f8ac62892","callStates":[{"id":"94dc0f76-7e68-5a02-b747-6dfdbce6ce59","type":"STARTING","sequenceNumber":1,"timestamp":"2025-03-18T13:18:03.518Z","participants":[{"id":"68456c8f-67a8-521e-a56f-3b3f8ac62892","legId":"0ce12211-eed9-4ed0-a30f-7b0eb358277a","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","type":{"name":"Comercial Gabriela-Daisyane","value":"LINE","device":{"id":"e22380dc-4cf7-44f3-aa21-e2296644f218","model":"goto.clients"},"lineId":"b33b6f9c-7626-4aa7-823c-cd0010e2781e","deviceId":"e22380dc-4cf7-44f3-aa21-e2296644f218","extensionNumber":"6114"},"recordings":[],"liveTranscripts":[],"status":{"value":"RINGING"}}],"interactiveVoiceResponseSystems":[]},{"id":"3fac2af4-ac98-5521-802b-9214cbc1ed45","type":"STARTING","sequenceNumber":2,"timestamp":"2025-03-18T13:18:03.700Z","participants":[{"id":"68456c8f-67a8-521e-a56f-3b3f8ac62892","legId":"0ce12211-eed9-4ed0-a30f-7b0eb358277a","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","type":{"name":"Comercial Gabriela-Daisyane","value":"LINE","device":{"id":"e22380dc-4cf7-44f3-aa21-e2296644f218","model":"goto.clients"},"lineId":"b33b6f9c-7626-4aa7-823c-cd0010e2781e","deviceId":"e22380dc-4cf7-44f3-aa21-e2296644f218","extensionNumber":"6114"},"recordings":[],"liveTranscripts":[],"status":{"value":"RINGING"}},{"id":"ccaae240-0a44-5cf6-bc6d-1472b5c2e713","legId":"a90f8b6b-e2cd-4607-9ce0-44af3bb64f72","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","type":{"name":"CearaGPS","value":"PHONE_NUMBER","callee":{"name":"","number":"+5585987327422"},"number":"+558534846006","phoneNumberId":"c30dc08d-d7cc-4cad-a967-8db6552e558f"},"recordings":[],"liveTranscripts":[],"status":{"value":"RINGING"}}],"interactiveVoiceResponseSystems":[]},{"id":"61f6f096-fa2b-585f-93c6-2e074e5317a3","type":"ACTIVE","sequenceNumber":3,"timestamp":"2025-03-18T13:18:15.112Z","participants":[{"id":"68456c8f-67a8-521e-a56f-3b3f8ac62892","legId":"0ce12211-eed9-4ed0-a30f-7b0eb358277a","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","type":{"name":"Comercial Gabriela-Daisyane","value":"LINE","device":{"id":"e22380dc-4cf7-44f3-aa21-e2296644f218","model":"goto.clients"},"lineId":"b33b6f9c-7626-4aa7-823c-cd0010e2781e","deviceId":"e22380dc-4cf7-44f3-aa21-e2296644f218","extensionNumber":"6114"},"recordings":[{"id":"bf04ae2f-bcd6-4f5b-a65c-acb33d01c147","startTimestamp":"2025-03-18T13:18:11.692Z","transcriptEnabled":false}],"liveTranscripts":[],"status":{"value":"CONNECTED"}},{"id":"ccaae240-0a44-5cf6-bc6d-1472b5c2e713","legId":"a90f8b6b-e2cd-4607-9ce0-44af3bb64f72","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","type":{"name":"CearaGPS","value":"PHONE_NUMBER","callee":{"name":"","number":"+5585987327422"},"number":"+558534846006","phoneNumberId":"c30dc08d-d7cc-4cad-a967-8db6552e558f"},"recordings":[],"liveTranscripts":[],"status":{"value":"RINGING"}}],"interactiveVoiceResponseSystems":[]},{"id":"686568bc-90e2-559a-99ec-151ae5355011","type":"ACTIVE","sequenceNumber":4,"timestamp":"2025-03-18T13:18:15.112Z","participants":[{"id":"68456c8f-67a8-521e-a56f-3b3f8ac62892","legId":"0ce12211-eed9-4ed0-a30f-7b0eb358277a","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","type":{"name":"Comercial Gabriela-Daisyane","value":"LINE","device":{"id":"e22380dc-4cf7-44f3-aa21-e2296644f218","model":"goto.clients"},"lineId":"b33b6f9c-7626-4aa7-823c-cd0010e2781e","deviceId":"e22380dc-4cf7-44f3-aa21-e2296644f218","extensionNumber":"6114"},"recordings":[{"id":"bf04ae2f-bcd6-4f5b-a65c-acb33d01c147","startTimestamp":"2025-03-18T13:18:11.692Z","transcriptEnabled":false}],"liveTranscripts":[],"status":{"value":"CONNECTED"}},{"id":"ccaae240-0a44-5cf6-bc6d-1472b5c2e713","legId":"a90f8b6b-e2cd-4607-9ce0-44af3bb64f72","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","type":{"name":"CearaGPS","value":"PHONE_NUMBER","callee":{"name":"","number":"+5585987327422"},"number":"+558534846006","phoneNumberId":"c30dc08d-d7cc-4cad-a967-8db6552e558f"},"recordings":[],"liveTranscripts":[],"status":{"value":"CONNECTED"}}],"interactiveVoiceResponseSystems":[]},{"id":"2e71b459-fa8a-5a36-9c29-8a58d5a41c5a","type":"ACTIVE","sequenceNumber":5,"timestamp":"2025-03-18T13:18:16.580Z","participants":[{"id":"68456c8f-67a8-521e-a56f-3b3f8ac62892","legId":"0ce12211-eed9-4ed0-a30f-7b0eb358277a","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","type":{"name":"Comercial Gabriela-Daisyane","value":"LINE","device":{"id":"e22380dc-4cf7-44f3-aa21-e2296644f218","model":"goto.clients"},"lineId":"b33b6f9c-7626-4aa7-823c-cd0010e2781e","deviceId":"e22380dc-4cf7-44f3-aa21-e2296644f218","extensionNumber":"6114"},"recordings":[{"id":"bf04ae2f-bcd6-4f5b-a65c-acb33d01c147","startTimestamp":"2025-03-18T13:18:11.692Z","transcriptEnabled":false}],"liveTranscripts":[],"status":{"value":"CONNECTED"}},{"id":"ccaae240-0a44-5cf6-bc6d-1472b5c2e713","legId":"a90f8b6b-e2cd-4607-9ce0-44af3bb64f72","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","type":{"name":"CearaGPS","value":"PHONE_NUMBER","callee":{"name":"","number":"+5585987327422"},"number":"+558534846006","phoneNumberId":"c30dc08d-d7cc-4cad-a967-8db6552e558f"},"recordings":[{"id":"1d5c3b9b-3dcc-491b-9088-fc01335d657a","startTimestamp":"2025-03-18T13:18:15.124Z","transcriptEnabled":false}],"liveTranscripts":[],"status":{"value":"DISCONNECTING"}}],"interactiveVoiceResponseSystems":[]},{"id":"2302ffb8-b2a5-5877-9742-efe2aa8a10b7","type":"ENDING","sequenceNumber":6,"timestamp":"2025-03-18T13:18:16.628Z","participants":[{"id":"68456c8f-67a8-521e-a56f-3b3f8ac62892","legId":"0ce12211-eed9-4ed0-a30f-7b0eb358277a","originator":"68456c8f-67a8-521e-a56f-3b3f8ac62892","type":{"name":"Comercial Gabriela-Daisyane","value":"LINE","device":{"id":"e22380dc-4cf7-44f3-aa21-e2296644f218","model":"goto.clients"},"lineId":"b33b6f9c-7626-4aa7-823c-cd0010e2781e","deviceId":"e22380dc-4cf7-44f3-aa21-e2296644f218","extensionNumber":"6114"},"recordings":[{"id":"bf04ae2f-bcd6-4f5b-a65c-acb33d01c147","startTimestamp":"2025-03-18T13:18:11.692Z","transcriptEnabled":false}],"liveTranscripts":[],"status":{"value":"DISCONNECTING"}}],"interactiveVoiceResponseSystems":[]}]},"webhookUrl":"https://n8nwebhook.cearatec.cloud/webhook/nps02_teste","executionMode":"production"}}]},"versionId":"55129e51-1a32-43e3-a404-618a68b0abfe","triggerCount":1,"tags":[{"createdAt":"2025-03-15T16:20:53.323Z","updatedAt":"2025-03-15T16:20:53.323Z","id":"BQ3vWosWXZVkBdWu","name":"Grupo Ramos"}]}